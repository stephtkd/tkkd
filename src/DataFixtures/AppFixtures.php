<?phpnamespace App\DataFixtures;use App\Entity\Event;use App\Entity\Member;use App\Entity\MembershipRate;use App\Entity\Post;use App\Entity\User;use App\Repository\MemberRepository;use App\Utils\DateTimeHandler;use DateTime;use Doctrine\Bundle\FixturesBundle\Fixture;use Doctrine\Persistence\ObjectManager;use Faker\Factory;use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;class AppFixtures extends Fixture{    private UserPasswordHasherInterface $encoder;    public function __construct(UserPasswordHasherInterface $userPasswordEncoder)    {        $this->encoder = $userPasswordEncoder;    }    public function load(ObjectManager $manager)    {        $faker = Factory::create('fr_FR');        for ($i = 0; $i < 20; ++$i) {            $user = new User();            $user->setFirstName($faker->firstName);            $user->setLastName($faker->lastName);            $user->setEmail($faker->email);            $user->setPassword($password = $this->encoder->hashPassword($user, 'test'));            $user->setRoles(['ROLE_USER']);            $user->setIsVerified(true);            $manager->persist($user);        }        $this->createStaticMembershipRates($manager);        for ($i = 0; $i < 20; ++$i) {            $post = new Post();            $post->setLabel($faker->sentence(5));            $post->setText($faker->realText(150));            $post->setType($faker->randomElement(['Infos', 'Tournoi', 'Sorties']));            $post->setPublicationDate($faker->dateTimeBetween('-2 months', 'NOW'));            $manager->persist($post);        }        $manager->flush();        $userRepository = $manager->getRepository(User::class);        /** @var User $user */        $users = $userRepository->findAll();        for ($i = 0; $i < 40; ++$i) {            $member = new Member();            $member->setFirstName($faker->firstName);            $member->setLastName($faker->lastName);            $member->setEmail($faker->email);            $member->setStreetAdress($faker->streetAddress);            $member->setPostalCode($faker->postcode);            $member->setCity($faker->city);            $member->setPhoneNumber($faker->phoneNumber);            $member->setEmergencyPhone($faker->phoneNumber);            $member->setBirthdate($faker->dateTimeBetween('- 40 years', '- 10 years'));            $member->setSex($faker->randomElement(['Homme', 'Femme']));            $member->setNationality('française');            $member->setResponsibleAdult($faker->randomElement($users));            $member->setComment($faker->randomElement(['Exemple de commentaire', '']));            $member->setLevel($faker->randomElement(['Débutant', 'Intermédiaire', 'Confirmé']));            $member->setStatus('élève');            $member->setUpToDateMembership($faker->randomNumber([0, 1]));            $member->setSuscriptionDate($faker->randomElement([$faker->dateTimeBetween('-2 years', '- 2 months'), null]));            $manager->persist($member);            $membershipRateRepository = $manager->getRepository(MembershipRate::class);            $memberBirthdate = $member->getBirthdate();            $age = DateTimeHandler::ageCalculation($memberBirthdate->format('Y-m-d'));            $memberSubscriptionDate = $member->getSuscriptionDate();            if ($age > 12 && is_null($memberSubscriptionDate)) {                /** @var MembershipRate $membershipRate */                $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Adulte - Premier Abonnement']);                $member->setMembershipRate($membershipRate);            } elseif ($age > 12 && $memberSubscriptionDate) {                /** @var MembershipRate $membershipRate */                $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Adulte - Renouvellement']);                $member->setMembershipRate($membershipRate);            } elseif ($age < 12 && is_null($memberSubscriptionDate)) {                /** @var MembershipRate $membershipRate */                $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Enfant - Premier Abonnement']);                $member->setMembershipRate($membershipRate);            } elseif ($age < 12 && $memberSubscriptionDate) {                /** @var MembershipRate $membershipRate */                $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Enfant - Renouvellement']);                $member->setMembershipRate($membershipRate);            }            /** @var MemberRepository $memberRepository */            $memberRepository = $manager->getRepository(Member::class);            //TODO Validate membership state            //MemberController::updateMembershipState($memberRepository, $manager);            $manager->persist($member);        }        $this->createStaticData($manager);        $manager->flush();    }    public function createStaticMembershipRates(ObjectManager $manager): void    {        // Create static membership rates in DB        $dataMembershipRate = ['Tarif Enfant - Premier Abonnement', 250, 12];        $staticMembershipRate = $this->createStaticMembershipRate($dataMembershipRate);        $manager->persist($staticMembershipRate);        $dataMembershipRate = ['Tarif Adulte - Premier Abonnement', 350];        $staticMembershipRate = $this->createStaticMembershipRate($dataMembershipRate);        $manager->persist($staticMembershipRate);        $dataMembershipRate = ['Tarif Enfant - Renouvellement', 200, 12];        $staticMembershipRate = $this->createStaticMembershipRate($dataMembershipRate);        $manager->persist($staticMembershipRate);        $dataMembershipRate = ['Tarif Adulte - Renouvellement', 300];        $staticMembershipRate = $this->createStaticMembershipRate($dataMembershipRate);        $manager->persist($staticMembershipRate);    }    /**     * Create static data in DB (members, users, membership_rates, posts).     */    public function createStaticData(ObjectManager $manager): void    {        // Create static users in DB        $dataUser = ['Bruce', 'Wayne', 'batman@test.com', ['ROLE_USER'], 'test'];        $staticUser = $this->createStaticUser($dataUser);        $staticUser->setIsVerified(true);        $manager->persist($staticUser);        $dataUser = ['Clark', 'Kent', 'super@test.com', ['ROLE_ADMIN'], 'test'];        $staticUser = $this->createStaticUser($dataUser);        $staticUser->setIsVerified(true);        $manager->persist($staticUser);        // Create static posts in DB        $postData = ['Self défense féminine', 'Stage',            'Venez participer à une stage de self défense féminine. Exclusivement réservé à la gent féminine (13 ans et +)',            (new DateTime('NOW')), ];        $staticPost = $this->createStaticPost($postData);        $manager->persist($staticPost);        $postData = ['Projet Corée 2022', 'Informations', "Le club a le projet d'emmener 7 élèves en Corée en été 2022 pendant 2 semaines pour : participer à des séminaires dispensés par des Grands-Maîtres Coréens                    et s'entraîner avec des élèves venus des 4 coins du monde",            (new DateTime('NOW')), ];        $staticPost = $this->createStaticPost($postData);        $manager->persist($staticPost);        $manager->flush();        // Create static members in DB        $userRepository = $manager->getRepository(User::class);        $membershipRateRepository = $manager->getRepository(MembershipRate::class);        /** @var User $user */        $user = $userRepository->findOneBy(['lastName' => 'Wayne']);        $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Adulte - Premier Abonnement']);        $birthday = new DateTime('1980-08-09');        $dataMember = ['Bruce', 'Wayne', 'batman@test.com', $birthday, '4 rue Leon Jamin', 'Nantes', '44200', '0687954266', 'Exemple de commentaire', 'débutant', 'française', 'homme', $user, '0687954266', true, 'élève', $membershipRate, 'Validée'];        $staticMember = $this->createStaticMember($dataMember);        $manager->persist($staticMember);        $membershipRate = $membershipRateRepository->findOneBy(['label' => 'Tarif Enfant - Premier Abonnement']);        $birthday = new DateTime('2010-05-04');        $dataMember = ['Robin', 'Wayne', 'robin@test.com', $birthday, '4 rue Leon Jamin', 'Nantes', '44000', '0687954266', 'Exemple de commentaire', 'débutant', 'française', 'homme', $user, '0687954266', true, 'élève', $membershipRate, 'Validée'];        $staticMember = $this->createStaticMember($dataMember);        $manager->persist($staticMember);        $startDate = new DateTime('2022-05-31T00:00:00+01:00');        $endDate = new DateTime('2022-05-31T00:00:00+01:00');        $registrationDeadline = new DateTime('2022-05-10 00:00:00');        $eventData = ['Repas de fin de saison', 'Pour fêter la fin de saison le club organise un repas de fin de saison', 20, 20, 10, $startDate, $endDate, $registrationDeadline];        $staticEvent = $this->createStaticEvent($eventData);        $memberRepository = $manager->getRepository(Member::class);        $members = $memberRepository->findAll();        $randomNum = rand(0, count($members));        for ($i = 0; $i < $randomNum; ++$i) {            $randomMemberId = array_rand($members, 1);            /** @var Member $randomMember */            $randomMember = $members[$randomMemberId];            $staticEvent->addParticipant($randomMember);        }        $manager->persist($staticEvent);        $manager->flush();    }    public const LABEL_MEMBERSHIP_RATE = 0;    public const PRICE = 1;    public const MAXIMUM_AGE = 2;    /**     * Helper to create static membership rates.     */    public function createStaticMembershipRate(?array $dataMembershipRate): MembershipRate    {        $staticMembershipRate = new MembershipRate();        $staticMembershipRate->setLabel($dataMembershipRate[self::LABEL_MEMBERSHIP_RATE]);        $staticMembershipRate->setPrice($dataMembershipRate[self::PRICE]);        if (array_key_exists(self::MAXIMUM_AGE, $dataMembershipRate)) {            $staticMembershipRate->setMaximumAge($dataMembershipRate[self::MAXIMUM_AGE]);        } else {            $staticMembershipRate->setMaximumAge(null);        }        return $staticMembershipRate;    }    public const USER_FIRSTNAME = 0;    public const USER_LASTNAME = 1;    public const USER_EMAIL = 2;    public const USER_ROLES = 3;    public const USER_PASSWORD = 4;    /**     * Helper to create static Users.     */    public function createStaticUser(array $dataUser): User    {        $staticUser = new User();        $staticUser->setFirstName($dataUser[self::USER_FIRSTNAME]);        $staticUser->setLastName($dataUser[self::USER_LASTNAME]);        $staticUser->setEmail($dataUser[self::USER_EMAIL]);        $staticUser->setRoles($dataUser[self::USER_ROLES]);        $staticUser->setPassword($this->encoder->hashPassword($staticUser, $dataUser[self::USER_PASSWORD]));        return $staticUser;    }    public const MEMBER_FIRSTNAME = 0;    public const MEMBER_LASTNAME = 1;    public const MEMBER_EMAIL = 2;    public const MEMBER_BIRTHDATE = 3;    public const MEMBER_STREET_ADRESS = 4;    public const MEMBER_CITY = 5;    public const MEMBER_POSTCODE = 6;    public const MEMBER_PHONE_NUMBER = 7;    public const MEMBER_COMMENT = 8;    public const MEMBER_LEVEL = 9;    public const MEMBER_NATIONALITY = 10;    public const MEMBER_SEX = 11;    public const MEMBER_RESPONSIBLE_ADULT = 12;    public const MEMBER_EMERGENCY_PHONE = 13;    public const MEMBER_UP_TO_DATE_MEMBERSHIP = 14;    public const MEMBER_STATUS = 15;    public const MEMBER_MEMBERSHIP_RATE = 16;    public const MEMBER_MEMBERSHIP_STATE = 17;    /**     * Helper to create static members.     */    public function createStaticMember(array $dataMember): Member    {        $staticMember = new Member();        $staticMember->setFirstName($dataMember[self::MEMBER_FIRSTNAME]);        $staticMember->setLastName($dataMember[self::MEMBER_LASTNAME]);        $staticMember->setEmail($dataMember[self::MEMBER_EMAIL]);        $staticMember->setBirthdate($dataMember[self::MEMBER_BIRTHDATE]);        $staticMember->setStreetAdress($dataMember[self::MEMBER_STREET_ADRESS]);        $staticMember->setPostalCode($dataMember[self::MEMBER_POSTCODE]);        $staticMember->setCity($dataMember[self::MEMBER_CITY]);        $staticMember->setPhoneNumber($dataMember[self::MEMBER_PHONE_NUMBER]);        $staticMember->setComment($dataMember[self::MEMBER_COMMENT]);        $staticMember->setLevel($dataMember[self::MEMBER_LEVEL]);        $staticMember->setNationality($dataMember[self::MEMBER_NATIONALITY]);        $staticMember->setSex($dataMember[self::MEMBER_SEX]);        $staticMember->setResponsibleAdult($dataMember[self::MEMBER_RESPONSIBLE_ADULT]);        $staticMember->setEmergencyPhone($dataMember[self::MEMBER_EMERGENCY_PHONE]);        $staticMember->setUpToDateMembership($dataMember[self::MEMBER_UP_TO_DATE_MEMBERSHIP]);        $staticMember->setStatus($dataMember[self::MEMBER_STATUS]);        $staticMember->setMembershipRate($dataMember[self::MEMBER_MEMBERSHIP_RATE]);        $staticMember->setMembershipState($dataMember[self::MEMBER_MEMBERSHIP_STATE]);        return $staticMember;    }    public const POST_LABEL = 0;    public const POST_TYPE = 1;    public const POST_TEXT = 2;    public const POST_PUBLICATION_DATE = 3;    /**     * Helper to create static posts.     */    public function createStaticPost(array $postData): Post    {        $staticPost = new Post();        $staticPost->setLabel($postData[self::POST_LABEL]);        $staticPost->setType($postData[self::POST_TYPE]);        $staticPost->setText($postData[self::POST_TEXT]);        $staticPost->setPublicationDate($postData[self::POST_PUBLICATION_DATE]);        return $staticPost;    }    public const EVENT_LABEL = 0;    public const EVENT_DESCRIPTION = 1;    public const EVENT_MAXIMUM_PARTICIPANTS = 2;    public const EVENT_ADULT_RATE = 3;    public const EVENT_CHILD_RATE = 4;    public const EVENT_START_DATE = 5;    public const EVENT_END_DATE = 6;    public const EVENT_REGISTRATION_DEADLINE = 7;    /**     * Helper to create static events.     */    public function createStaticEvent(array $eventData): Event    {        $staticEvent = new Event();        $staticEvent->setLabel($eventData[self::EVENT_LABEL]);        $staticEvent->setDescription($eventData[self::EVENT_DESCRIPTION]);        $staticEvent->setMaximumNumberOfParticipants($eventData[self::EVENT_MAXIMUM_PARTICIPANTS]);        $staticEvent->setAdultRate($eventData[self::EVENT_ADULT_RATE]);        $staticEvent->setChildRate($eventData[self::EVENT_CHILD_RATE]);        $staticEvent->setStartDate($eventData[self::EVENT_START_DATE]);        $staticEvent->setEndDate($eventData[self::EVENT_END_DATE]);        $staticEvent->setRegistrationDeadline($eventData[self::EVENT_REGISTRATION_DEADLINE]);        return $staticEvent;    }}